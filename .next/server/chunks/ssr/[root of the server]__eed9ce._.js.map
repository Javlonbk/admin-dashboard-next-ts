{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///media/javlonbek/New%20Volume/nextjs_dashboard/app/ui/dashboard/cards.tsx"],"sourcesContent":["import {\n  BanknotesIcon,\n  ClockIcon,\n  UserGroupIcon,\n  InboxIcon,\n} from '@heroicons/react/24/outline';\nimport { lusitana } from '@/app/ui/fonts';\n\nconst iconMap = {\n  collected: BanknotesIcon,\n  customers: UserGroupIcon,\n  pending: ClockIcon,\n  invoices: InboxIcon,\n};\n\nexport default  function CardWrapper({\n  totalPaidInvoices,\n  totalPendingInvoices,\n  numberOfInvoices,\n  numberOfCustomers\n}: {\n  totalPaidInvoices: number;\n  totalPendingInvoices: number;\n  numberOfInvoices: number;\n  numberOfCustomers: number;\n}) {\n  return (\n    <>\n      {/* NOTE: Uncomment this code in Chapter 9 */}\n\n      <Card title=\"Collected\" value={totalPaidInvoices} type=\"collected\" />\n      <Card title=\"Pending\" value={totalPendingInvoices} type=\"pending\" />\n      <Card title=\"Total Invoices\" value={numberOfInvoices} type=\"invoices\" />\n      <Card\n        title=\"Total Customers\"\n        value={numberOfCustomers}\n        type=\"customers\"\n      />\n    </>\n  );\n}\n\nexport function Card({\n  title,\n  value,\n  type,\n}: {\n  title: string;\n  value: number | string;\n  type: 'invoices' | 'customers' | 'pending' | 'collected';\n}) {\n  const Icon = iconMap[type];\n\n  return (\n    <div className=\"rounded-xl bg-gray-50 p-2 shadow-sm\">\n      <div className=\"flex p-4\">\n        {Icon ? <Icon className=\"h-5 w-5 text-gray-700\" /> : null}\n        <h3 className=\"ml-2 text-sm font-medium\">{title}</h3>\n      </div>\n      <p\n        className={`${lusitana.className}\n          truncate rounded-xl bg-white px-4 py-8 text-center text-2xl`}\n      >\n        {value}\n      </p>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAMA;AANA;AAAA;AAAA;AAAA;AAMA;;;;AAEA,MAAM,UAAU;IACd,WAAW,gTAAA,CAAA,gBAAa;IACxB,WAAW,gTAAA,CAAA,gBAAa;IACxB,SAAS,wSAAA,CAAA,YAAS;IAClB,UAAU,wSAAA,CAAA,YAAS;AACrB;AAEgB,SAAS,YAAY,EACnC,iBAAiB,EACjB,oBAAoB,EACpB,gBAAgB,EAChB,iBAAiB,EAMlB;IACC,qBACE;;0BAGE,6WAAC;gBAAK,OAAM;gBAAY,OAAO;gBAAmB,MAAK;;;;;;0BACvD,6WAAC;gBAAK,OAAM;gBAAU,OAAO;gBAAsB,MAAK;;;;;;0BACxD,6WAAC;gBAAK,OAAM;gBAAiB,OAAO;gBAAkB,MAAK;;;;;;0BAC3D,6WAAC;gBACC,OAAM;gBACN,OAAO;gBACP,MAAK;;;;;;;;AAIb;AAEO,SAAS,KAAK,EACnB,KAAK,EACL,KAAK,EACL,IAAI,EAKL;IACC,MAAM,OAAO,OAAO,CAAC,KAAK;IAE1B,qBACE,6WAAC;QAAI,WAAU;;0BACb,6WAAC;gBAAI,WAAU;;oBACZ,qBAAO,6WAAC;wBAAK,WAAU;;;;;+BAA6B;kCACrD,6WAAC;wBAAG,WAAU;kCAA4B;;;;;;;;;;;;0BAE5C,6WAAC;gBACC,WAAW,GAAG,mLAAA,CAAA,WAAQ,CAAC,SAAS,CAAC;qEAC4B,CAAC;0BAE7D;;;;;;;;;;;;AAIT"}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 120, "column": 0}, "map": {"version":3,"sources":["file:///media/javlonbek/New%20Volume/nextjs_dashboard/app/lib/utils.ts"],"sourcesContent":["import { Revenue } from './definitions';\n\nexport const formatCurrency = (amount: number) => {\n  return (amount / 100).toLocaleString('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  });\n};\n\nexport const formatDateToLocal = (\n  dateStr: string,\n  locale: string = 'en-US',\n) => {\n  const date = new Date(dateStr);\n  const options: Intl.DateTimeFormatOptions = {\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric',\n  };\n  const formatter = new Intl.DateTimeFormat(locale, options);\n  return formatter.format(date);\n};\n\nexport const generateYAxis = (revenue: Revenue[]) => {\n  // Calculate what labels we need to display on the y-axis\n  // based on highest record and in 1000s\n  const yAxisLabels = [];\n  const highestRecord = Math.max(...revenue.map((month) => month.revenue));\n  const topLabel = Math.ceil(highestRecord / 1000) * 1000;\n\n  for (let i = topLabel; i >= 0; i -= 1000) {\n    yAxisLabels.push(`$${i / 1000}K`);\n  }\n\n  return { yAxisLabels, topLabel };\n};\n\nexport const generatePagination = (currentPage: number, totalPages: number) => {\n  // If the total number o